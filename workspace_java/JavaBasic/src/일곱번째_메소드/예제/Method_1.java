package 일곱번째_메소드.예제;

// 메소드(Method) == 함수(Function)
// 메소드는 반복해서 실행하는 코드를 미리 하나의 기능으로 정의한 것
// 메소드의 사용은 크게 메소드의 정의 부분과 메소드 호출 부분으로 나뉨
// 메소드를 사용하려면 반드시 메소드 정의 후 호출을 해야 실행 됨.
// 정의만 하면 실행되지 않음.

// 메소드의 정의는 클래스 안 + 다른 메소드 밖에서 선언
// 메소드는 필요한만큼 무한정 정의할 수 있음
// 메소드명은 중복 불가능(대소문자 구문)
// 메소드명은 항상 소문자로 작명


// 메소드의 정의 문법
/*
    접근제한자 리턴타입 메소드명(매개변수 정보){

    }

    public(접근제한) static void(리턴타입) 메소드명(){
        결과 값을 외부로 내보내는 것 - 리턴
    }

    결과 값을 밖으로 내보낼 때는 내보낼 값의 자료형과 리턴 타입의 자료형이 같아야함.
*/

// 메소드의 호출은 메소드의 정의 안에서 호출
// 메소드를 호출할 때는 정의한 메소드명을 반드시 일치시켜야함.
// 메소드를 호출할 때는 정의한 메소도의 매개변수 정보를 일치시켜야함.
// 매개변수 정보 : 매개변수의 자료형, 매개변수의 갯수 ( 둘다 일치시켜야 함 )

// 매개변수(parameter) : 메소드 정의 부분 () 안에서 정의된 변수
// 매개변수의 역할 : 메소드의 기능을 구현할 때 필요한 데이터를 외부로부터 받아오는 것

// 리턴타입 : 메소드의 실행 결과 값을 외부로 전달할 때 사용.
// 리턴타입은 메소드의 실행 결과 외부로 전달될 데이터 타입과 일치시켜야함.
// 실행결과를 리턴할 필요가 없을 때 ( 리턴할 데이터가 없을 때 ) 는 void를 사용.
// 메소드의 실행 결과 리턴 데이터가 있다면 메소드 내부에서 'return' 키워드를 사용한다.
// 'return' 키워드는 항상 메소드의 마지막에 딱 한번만 실행 가능



public class Method_1 {
    // 메소드의 정의
    public static void hello(){
        System.out.println("hello");

    }
    // 메인이라는 메소드의 정의
    public static void main(String[] args) {
        // 메소드의 호출
        hello();
    }


}
